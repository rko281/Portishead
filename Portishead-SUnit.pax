| package |
package := Package name: 'Portishead-SUnit'.
package paxVersion: 1;
	basicComment: ''.


package methodNames
	add: #TestCase -> #assertCollection:equals:;
	add: #TestCase -> #classForTestResult;
	add: #TestCase -> #comparingCollectionBetween:and:;
	add: #TestCase -> #executeShould:inScopeOf:withExceptionDo:;
	add: #TestCase -> #should:raise:withExceptionDo:;
	add: 'TestCase class' -> #classForTestResult;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\Core\Object Arts\Dolphin\Base\Dolphin';
	add: '..\Core\Contributions\Camp Smalltalk\SUnit\SUnit';
	yourself).

package!

"Class Definitions"!


"Global Aliases"!


"Loose Methods"!

!TestCase methodsFor!

assertCollection: actual equals: expected
	"Specialized test method that generates a proper error message for collection"
	^ self
		assert: expected = actual
		description: [ self comparingCollectionBetween: actual and: expected ]!

classForTestResult

	^self class classForTestResult!

comparingCollectionBetween: left and: right
	| additionalLeft additionalRight sortBlock|
	
	"use a very slow sort block"
	sortBlock := [ :a :b | a asString <= b asString ].
	additionalLeft := (left difference: right) sorted: sortBlock.
	additionalRight := (right difference: left) sorted: sortBlock. 
	
	^ String streamContents: [:stream |
		stream
			nextPutAll: 'Given Collections do not match. Got '; lf;
			tab; nextPutAll: 'left := '; print: left; nextPut: $.; lf;
			nextPutAll: ' instead of ';
			tab; nextPutAll: ' right :='; print: right; nextPut: $.; lf.
		left size = right size
			ifFalse: [ 
				stream 
					nextPutAll: 'Collection size does not match: left='; 
					print: left size;
					nextPutAll: ' vs. right=';
					print: right size; lf ].
		additionalLeft isEmpty
			ifFalse: [ 
				stream 
					nextPutAll: 'Got ';
					print: additionalLeft size;
					nextPutAll: ' additional element(s) in the left collection: ';
					tab; print: additionalLeft  ].
		additionalRight isEmpty
			ifFalse: [ 
				stream 
					nextPutAll: 'Got ';
					print: additionalRight size;
					nextPutAll: ' additional element(s) in the right collection: ';
					tab; print: additionalRight  ]]!

executeShould: aBlock inScopeOf: anException withExceptionDo: anotherBlock

	^[aBlock value.
 	false] 
		on: anException
		do: [:exception | 
			anotherBlock value: exception.
			exception return: true]!

should: aBlock raise: anException withExceptionDo: anotherBlock 

	^self assert: (self executeShould: aBlock inScopeOf: anException withExceptionDo: anotherBlock)! !
!TestCase categoriesFor: #assertCollection:equals:!asserting!public! !
!TestCase categoriesFor: #classForTestResult!accessing!public! !
!TestCase categoriesFor: #comparingCollectionBetween:and:!comparing!private! !
!TestCase categoriesFor: #executeShould:inScopeOf:withExceptionDo:!asserting!private! !
!TestCase categoriesFor: #should:raise:withExceptionDo:!asserting!public! !

!TestCase class methodsFor!

classForTestResult

	^TestResult! !
!TestCase class categoriesFor: #classForTestResult!Accessing!public! !

"End of package definition"!

