| package |
package := Package name: 'Portishead-Core'.
package paxVersion: 1;
	basicComment: 'Portishead - Pharo Compatibility for Dolphin Smalltalk


MDL - added Object>>value; Number>>asString'.


package classNames
	add: #DynamicVariable;
	add: #MD5;
	add: #Month;
	add: #OrderedDictionary;
	add: #PackageManifest;
	add: #PharoColor;
	add: #PNGReadWriter;
	add: #SubscriptOutOfBounds;
	add: #Text;
	add: #Timespan;
	add: #UUID;
	add: #Week;
	add: #ZnUrl;
	yourself.

package methodNames
	add: #Behavior -> #isClass;
	add: #Behavior -> #portisheadShutDown:;
	add: #Behavior -> #portisheadStartUp:;
	add: #BlockClosure -> #forkAt:named:;
	add: #BlockClosure -> #valueWithPossibleArgument:;
	add: #Character -> #isSafeForHTTP;
	add: #Class -> #pharoPackageName:;
	add: #Class -> #subclass:instanceVariableNames:classVariableNames:pa
	add: #Collection -> #as:;
	add: #Collection -> #asDictionary;
	add: #Collection -> #detect:ifFound:;
	add: #Collection -> #detect:ifFound:ifNone:;
	add: #Collection -> #groupBy:having:;
	add: #Collection -> #groupedBy:;
	add: #Collection -> #groupedBy:having:;
	add: #Collection -> #ifEmpty:;
	add: #Collection -> #ifEmpty:ifNotEmpty:;
	add: #Collection -> #ifNotEmpty:;
	add: #Collection -> #isCollection;
	add: #Collection -> #isEmptyOrNil;
	add: #Collection -> #isNotEmpty;
	add: #Collection -> #min;
	add: #Collection -> #select:thenDo:;
	add: #Collection -> #sorted;
	add: #Collection -> #sorted:;
	add: #Collection -> #sum;
	add: #Date -> #asMonth;
	add: #Date -> #monthAbbreviation;
	add: #Date -> #onNextMonth;
	add: #Date -> #onPreviousMonth;
	add: #DateAndTime -> #asMonth;
	add: #DateAndTime -> #asWeek;
	add: #Dictionary -> #at:ifPresent:ifAbsent:;
	add: #Dictionary -> #at:ifPresent:ifAbsentPut:;
	add: #Exception -> #signalerContext;
	add: #Integer -> #asStringWithCommas;
	add: #Integer -> #asWords;
	add: #Integer -> #printStringHex;
	add: #Integer -> #printStringRoman;
	add: #Integer -> #romanDigits:for:on:;
	add: #Integer -> #threeDigitName;
	add: #IRegExpAbstract -> #matches:;
	add: #Message -> #argument;
	add: #Message -> #argument:;
	add: #Number -> #asSeconds;
	add: #Number -> #asStringWithCommas;
	add: #Number -> #milliSeconds;
	add: #Object -> #assert:description:;
	add: #Object -> #asString;
	add: #Object -> #flag:;
	add: #Object -> #isClass;
	add: #Object -> #isNotNil;
	add: #Object -> #split:;
	add: #Object -> #split:do:;
	add: #Object -> #split:indicesDo:;
	add: #Object -> #trace:;
	add: #Object -> #traceCr;
	add: #Object -> #traceCr:;
	add: #Object -> #traceCrTab:;
	add: #Object -> #value;
	add: #ProcessorScheduler -> #lowestPriority;
	add: #SequenceableCollection -> #copyWithoutFirst;
	add: #SequenceableCollection -> #doWithIndex:;
	add: #SequenceableCollection -> #ensureReadStream;
	add: #SequenceableCollection -> #sort;
	add: #SequenceableCollection -> #sort:;
	add: #SequencedStream -> #ensureReadStream;
	add: #Set -> #doWithIndex:;
	add: #StackFrame -> #stackOfSize:;
	add: #String -> #asInteger;
	add: #String -> #asRegexIgnoringCase;
	add: #String -> #asUnsignedInteger;
	add: #String -> #copyWithRegex:matchesReplacedWith:;
	add: #String -> #crLog;
	add: #String -> #format:;
	add: #String -> #includesSubstring:;
	add: #String -> #join:;
	add: #String -> #matchesRegex:;
	add: #String -> #substrings:;
	add: #String -> #translated;
	add: #String -> #truncateWithElipsisTo:;
	add: #String -> #uncapitalized;
	add: #Symbol -> #cull:;
	add: #Symbol -> #expandMacrosWithArguments:;
	add: #Symbol -> #value:;
	add: #SystemDictionary -> #addToShutDownList:;
	add: #SystemDictionary -> #addToStartUpList:;
	add: #SystemDictionary -> #hasClassNamed:;
	add: #TranscriptShell -> #crShow:;
	add: #UndefinedObject -> #subclass:instanceVariableNames:classVariableNames:package:;
	add: 'Color class' -> #r:g:b:range:;
	add: 'Date class' -> #firstWeekdayOfMonth:year:;
	add: 'Date class' -> #monthNames;
	add: 'Date class' -> #readFrom:pattern:;
	add: 'Dictionary class' -> #newFrom:;
	add: 'Float class' -> #readFrom:ifFail:;
	add: 'Integer class' -> #readFrom:ifFail:;
	add: 'Number class' -> #readFrom:ifFail:;
	add: 'Object class' -> #readFrom:;
	add: 'Object class' -> #readFromString:;
	add: 'SmallInteger class' -> #maxVal;
	add: 'SmallInteger class' -> #minVal;
	add: 'String class' -> #loremIpsum;
	add: 'String class' -> #loremIpsum:;
	yourself.

package globalNames
	add: #DateError;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	add: #DateError;
	yourself).

package setPrerequisites: #(
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\Core\Object Arts\Dolphin\Base\Dolphin Legacy Date & Time'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base'
	'..\Core\Object Arts\Dolphin\IDE\Base\Dolphin Transcript'
	'..\Core\Object Arts\Dolphin\DolphinSure\DolphinSure'
	'..\Core\Object Arts\Dolphin\MVP\Gdiplus\Gdiplus'
	'..\Core\Object Arts\Dolphin\ActiveX\Components\VBScript\VBScript Regular Expressions').

package!

"Class Definitions"!

Object subclass: #MD5
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #PackageManifest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #PNGReadWriter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #Timespan
	instanceVariableNames: 'dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ZnUrl
	instanceVariableNames: 'segments'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
String variableByteSubclass: #Text
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
LookupTable variableSubclass: #OrderedDictionary
	instanceVariableNames: 'orderedKeys'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Color subclass: #PharoColor
	instanceVariableNames: 'argb'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Error subclass: #SubscriptOutOfBounds
	instanceVariableNames: 'subscript lowerBound upperBound'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Notification subclass: #DynamicVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GUID variableByteSubclass: #UUID
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Timespan subclass: #Month
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Timespan subclass: #Week
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!

DateError := InvalidFormat!


"Loose Methods"!

!Behavior methodsFor!

isClass

	^true!

portisheadShutDown: isQuitting

	"Pharo compatibility - send shutDown: or shutDown to the receiver depending on what it implements.
	We don't implement shutDown:/shutDown here to avoid clashing with Grease or making Grease dependent on Portishead"

	(self respondsTo: #shutDown:) ifTrue: [^self shutDown: isQuitting].
	(self respondsTo: #shutDown) ifTrue: [^self shutDown]!

portisheadStartUp: isSaving

	"Pharo compatibility - send startUp: or startUp to the receiver depending on what it implements.
	We don't implement startUp:/startUp here to avoid clashing with Grease or making Grease dependent on Portishead"

	(self respondsTo: #startUp:) ifTrue: [^self startUp: isSaving].
	(self respondsTo: #startUp) ifTrue: [^self startUp]! !
!Behavior categoriesForMethods!
isClass!public!testing! !
portisheadShutDown:!public! !
portisheadStartUp:!public! !
!

!Class methodsFor!

pharoPackageName: packageString
	"Private - Set an appropriate Dolphin package and class category based on the Pharo fileout format 'package' string,
	which is a hyphen-separated list of both heavyweight packages and lightweight categories within the package.
	A Dolphin package encompassing part of the name must already exist, and we consider the rest to be the category."

	| nameParts package prefixCount |
	nameParts := packageString subStrings: '-'.
	prefixCount := (1 to: nameParts size) detect: 
					[:n |
					(package := Package manager packageNamed: ((nameParts first: n) joinWith: $-) ifNone: []) notNil].
	self
		owningPackage: package;
		category: ((nameParts allButFirst: prefixCount) joinWith: $-).!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString package: packageString
	^(self
		subclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		poolDictionaries: '') pharoPackageName: packageString.! !
!Class categoriesForMethods!
pharoPackageName:!private! !
subclass:instanceVariableNames:classVariableNames:package:!class hierarchy-adding!public! !
!

!BlockClosure methodsFor!

forkAt: anInteger named: aString

	^(self newProcess) 
		priority: anInteger;
		name: aString;
		resume!

valueWithPossibleArgument: anObject

	^self cull: anObject! !
!BlockClosure categoriesFor: #forkAt:named:!public!scheduling! !
!BlockClosure categoriesFor: #valueWithPossibleArgument:!*seaside-squeak-platform!public! !

!Character methodsFor!

isSafeForHTTP
	"whether a character is 'safe', or needs to be escaped when used, eg, in a URL"
	"[GG]  See http://www.faqs.org/rfcs/rfc1738.html. ~ is unsafe and has been removed"
	^ self codePoint < 128
		and: [self isAlphaNumeric
				or: ['.-_' includes: (Character value: self codePoint)]]! !
!Character categoriesFor: #isSafeForHTTP!public!testing! !

!Collection methodsFor!

as: aSimilarClass

	^aSimilarClass newFrom: self!

asDictionary

	^self as: Dictionary!

detect: aBlock ifFound: foundBlock
	"Evaluate aBlock with each of the receiver's elements as the argument.  
	If some element evaluates aBlock to true, then cull this element into 
	foundBlock. 
	If no element matches the criteria then do nothing.
	Always returns self to avoid misuse and a potential isNil check on the sender."

	self
		detect: aBlock
		ifFound: foundBlock
		ifNone: [ 
			"Do nothing on purpose"
			 ]!

detect: aBlock ifFound: foundBlock ifNone: exceptionBlock
	"Evaluate aBlock with each of the receiver's elements as the argument.  
	If some element evaluates aBlock to true, then cull this element into 
	foundBlock and answer the result of this evaluation. 
	If none evaluate to true, then evaluate exceptionBlock."

	self
		do: [ :each | 
			(aBlock value: each)
				ifTrue: [ ^ foundBlock cull: each ] ].
	^ exceptionBlock value	!

groupBy: keyBlock having: selectBlock 
	"This message is deprecated. Please use groupedBy:having:."

	#deprecated.

	^ self groupedBy: keyBlock having: selectBlock !

groupedBy: aBlock
	"Answer a dictionary whose keys are the result of evaluating aBlock
	for all my elements, and the value for each key is the selection of 
	my elements that evaluated to that key. Uses species."
	| groups |
	groups := LookupTable new.
	self do: [ :each |
		(groups at: (aBlock value: each) ifAbsentPut: [ OrderedCollection new ]) add: each ].
	self species ~~ OrderedCollection ifTrue: [
		groups associationsDo: [ :association |
			association value: (self species withAll: association value) ]].
	^ groups
!

groupedBy: aBlock having: aSelectionBlock
	"Like in SQL operation - Split the recievers contents into collections of 
	elements for which keyBlock returns the same results, and return those 
	collections allowed by selectBlock."
	^ (self groupedBy: aBlock) select: aSelectionBlock
!

ifEmpty: aBlock
	"Evaluate the given block, answering its value if the receiver is empty, otherwise answer the receiver."
	
	"Note that the fact that this method returns its receiver in case the receiver is not empty allows one to write expressions like the following ones: self classifyMethodAs: (myProtocol ifEmpty: ['As yet unclassified'])"

	^ self isEmpty 
		ifTrue: [ aBlock value ]
		ifFalse: [ self ]!

ifEmpty: emptyBlock ifNotEmpty: notEmptyBlock

	^self isEmpty 
		ifTrue: [emptyBlock value]
		ifFalse: [notEmptyBlock cull: self]!

ifNotEmpty: aBlock
	"Evaluate the given block with the receiver as argument, answering its value
    unless the receiver is empty, in which case answer the receiver."

    ^self isEmpty
          ifTrue: [self]
          ifFalse: [aBlock cull: self] 
!

isCollection
	^true!

isEmptyOrNil
	"Answer whether receiver is emtpy or nil. Receiver never can be nil."

	^self isEmpty!

isNotEmpty

	^self notEmpty!

min

	^self inject: self any into: [ :min :each | min min: each]!

select: selectBlock thenDo: doBlock
    "Utility method to improve readability.
	Do not create the intermediate collection."

    self do: [: each |
        ( selectBlock value: each ) 
			ifTrue: [ doBlock value: each ]
    ].!

sorted
	^ self sorted: [ :a :b | a <= b ]!

sorted: sortBlock
	^(Array withAll: self) sort: sortBlock!

sum
	"This is implemented using a variant of the normal inject:into: pattern. 
	The reason for this is that it is not known whether we're in the normal 
	number line, i.e. whether 0 is a good initial value for the sum. 
	Consider a collection of measurement objects, 0 would be the unitless 
	value and would not be appropriate to add with the unit-ed objects."
	| sum sample |
	sample := self anyOne.
	sum := self inject: sample into: [:accum :each | accum + each].
	^ sum - sample! !
!Collection categoriesForMethods!
as:!converting!public! !
asDictionary!converting!public! !
detect:ifFound:!enumerating!public! !
detect:ifFound:ifNone:!enumerating!public! !
groupBy:having:!public! !
groupedBy:!public! !
groupedBy:having:!public! !
ifEmpty:!public! !
ifEmpty:ifNotEmpty:!operations!public! !
ifNotEmpty:!operations!public! !
isCollection!public!testing! !
isEmptyOrNil!public!testing! !
isNotEmpty!public!testing! !
min!accessing!public! !
select:thenDo:!enumerating!public! !
sorted!*grease-pharo-core!public! !
sorted:!*grease-pharo-core!public! !
sum!operations!public! !
!

!Color class methodsFor!

r: r g: g b: b range: range

	| multiplier |

	multiplier := 255 / range.

	^self r: ((r * multiplier) rounded) g: ((g * multiplier) rounded) b: ((b * multiplier) rounded)! !
!Color class categoriesForMethods!
r:g:b:range:!instance creation!public! !
!

!Date methodsFor!

asMonth

	^self asDateAndTime asMonth!

monthAbbreviation

	^Locale default monthAbbreviation: self month!

onNextMonth

	^self addMonths: 1!

onPreviousMonth

	^self addMonths: -1! !
!Date categoriesForMethods!
monthAbbreviation!accessing!public! !
onNextMonth!accessing!public! !
onPreviousMonth!accessing!public! !
!

!Date class methodsFor!

firstWeekdayOfMonth: monthInteger year: yearInteger

	^(DateAndTime year: yearInteger month: monthInteger day: 1) dayOfWeek!

monthNames

	^(1 to: 12) collect: [ :index | Locale default monthName: index]!

readFrom: aStringOrStream pattern: patternString
	
	^self readFrom: aStringOrStream ensureReadStream format: patternString! !
!Date class categoriesForMethods!
firstWeekdayOfMonth:year:!enquiries!public! !
monthNames!public! !
readFrom:pattern:!instance creation!public! !
!

!DateAndTime methodsFor!

asMonth

	^Month new
		dateAndTime: (DateAndTime year: self year month: self month day: 1);
		yourself!

asWeek

	^Week new
		dateAndTime: (self midnight - (self dayOfWeek - 1) days);
		yourself! !
!DateAndTime categoriesForMethods!
asMonth!converting!public! !
asWeek!converting!public! !
!

!Dictionary methodsFor!

at: aSymbol ifPresent: presentBlock ifAbsent: absentBlock 

	^(self includesKey: aSymbol)
		ifTrue: [presentBlock cull: (self at: aSymbol)]
		ifFalse: [(absentBlock respondsTo: #value) ifTrue: [absentBlock value] ifFalse: [absentBlock]]!

at: aSymbol ifPresent: presentBlock ifAbsentPut: apBlock

	^(self includesKey: aSymbol)
		ifTrue: [presentBlock cull: (self at: aSymbol)]
		ifFalse: [self at: aSymbol put: ((apBlock respondsTo: #value) ifTrue: [apBlock value] ifFalse: [apBlock])]! !
!Dictionary categoriesForMethods!
at:ifPresent:ifAbsent:!public! !
at:ifPresent:ifAbsentPut:!public! !
!

!Dictionary class methodsFor!

newFrom: aCollectionOfAssociations

	^(self new: aCollectionOfAssociations size)
		addAll: aCollectionOfAssociations;
		yourself! !
!Dictionary class categoriesForMethods!
newFrom:!instance creation!public! !
!

!Exception methodsFor!

signalerContext

	^self signalFrame! !
!Exception categoriesForMethods!
signalerContext!accessing!public! !
!

!Float class methodsFor!

readFrom: aStream ifFail: aBlock

	^(super readFrom: aStream ifFail: aBlock) asFloat! !
!Float class categoriesForMethods!
readFrom:ifFail:!instance creation!public! !
!

!Integer methodsFor!

asStringWithCommas
	"123456789 asStringWithCommas"
	"-123456789 asStringWithCommas"
	^super asStringWithCommas readStream upTo: $.!

asWords
	"SmallInteger maxVal asWords"
	| mils minus three num answer milCount |
	self = 0 ifTrue: [^'zero'].
	mils := #('' ' thousand' ' million' ' billion' ' trillion' ' quadrillion' ' quintillion' ' sextillion' ' septillion' ' octillion' ' nonillion' ' decillion' ' undecillion' ' duodecillion' ' tredecillion' ' quattuordecillion' ' quindecillion' ' sexdecillion' ' septendecillion' ' octodecillion' ' novemdecillion' ' vigintillion').
	num := self.
	minus := ''.
	self < 0 ifTrue: [
		minus := 'negative '.
		num := num negated.
	].
	answer := String new.
	milCount := 1.
	[num > 0] whileTrue: [
		three := (num \\ 1000) threeDigitName.
		num := num // 1000.
		three isEmpty ifFalse: [
			answer isEmpty ifFalse: [
				answer := ', ',answer
			].
			answer := three,(mils at: milCount),answer.
		].
		milCount := milCount + 1.
	].
	^minus,answer!

printStringHex
	^self printStringBase: 16!

printStringRoman
	| stream integer |
	stream := String new writeStream.
	integer := self negative ifTrue: [stream nextPut: $-. self negated] ifFalse: [self].
	integer // 1000 timesRepeat: [stream nextPut: $M].
	integer
		romanDigits: 'MDC' for: 100 on: stream;
		romanDigits: 'CLX' for: 10 on: stream;
		romanDigits: 'XVI' for: 1 on: stream.
	^stream contents!

romanDigits: digits for: base on: aStream
	| n |
	n := self \\ (base * 10) // base.
	n = 9 ifTrue: [^ aStream nextPut: digits last; nextPut: digits first].
	n = 4 ifTrue: [^ aStream nextPut: digits last; nextPut: digits second].
	n > 4 ifTrue: [aStream nextPut: digits second].
	n \\ 5 timesRepeat: [aStream nextPut: digits last]!

threeDigitName

	| units answer |

	self = 0 ifTrue: [^''].
	units := #('one' 'two' 'three' 'four' 'five' 'six' 'seven' 'eight' 'nine' 'ten' 
		'eleven' 'twelve' 'thirteen' 'fourteen' 'fifteen' 'sixteen' 'seventeen' 
		'eighteen' 'nineteen').
	self > 99 ifTrue: [
		answer := (units at: self // 100),' hundred'.
		(self \\ 100) = 0 ifFalse: [
			answer := answer,' ',(self \\ 100) threeDigitName
		].
		^answer
	].
	self < 20 ifTrue: [
		^units at: self
	].
	answer := #('twenty' 'thirty' 'forty' 'fifty' 'sixty' 'seventy' 'eighty' 'ninety')
			at: self // 10 - 1.
	(self \\ 10) = 0 ifFalse: [
		answer := answer,'-',(units at: self \\ 10)
	].
	^answer! !
!Integer categoriesForMethods!
asStringWithCommas!converting!public! !
asWords!printing!public! !
printStringHex!printing!public! !
printStringRoman!printing!public! !
romanDigits:for:on:!printing!public! !
threeDigitName!printing!public! !
!

!Integer class methodsFor!

readFrom: aStream ifFail: aBlock

	^(super readFrom: aStream ifFail: aBlock) truncated! !
!Integer class categoriesForMethods!
readFrom:ifFail:!instance creation!public! !
!

!IRegExpAbstract methodsFor!

matches: aString

	^self test: aString! !
!IRegExpAbstract categoriesForMethods!
matches:!operations!public! !
!

!Message methodsFor!

argument

	^args at: 1!

argument: anObject

	^args at: 1 put: anObject! !
!Message categoriesForMethods!
argument!accessing!public! !
argument:!accessing!public! !
!

!Number methodsFor!

asSeconds

	^self seconds!

asStringWithCommas
	"123456789 asStringWithCommas"
	"-123456789 asStringWithCommas"
	^ String streamContents: [:stream | 
		Locale default displayFloat: self asFloat on: stream]!

milliSeconds

	^self milliseconds! !
!Number categoriesForMethods!
asSeconds!converting!public! !
asStringWithCommas!converting!public! !
milliSeconds!converting!public! !
!

!Number class methodsFor!

readFrom: aStringOrStream ifFail: aBlock

	| aStream value |
	aStream := aStringOrStream ensureReadStream.
	^(value := self readSmalltalkSyntaxFrom: aStream) isNil 
		ifTrue: [aBlock value]
		ifFalse: [
			(value isInteger and: [aStream peekFor: $/]) 
				ifTrue: [self readFractionFrom: aStream initialInteger: value]
				ifFalse: [value]]
! !
!Number class categoriesForMethods!
readFrom:ifFail:!instance creation!public! !
!

!Object methodsFor!

assert: aBlock description: aString
	"Evaluates aBlock and signals an error if the result is not true. The default action is to bring up a
	resumable walkback."

	aBlock value ifFalse: [_AssertionFailureSignal signal: aString]!

asString

	^self displayString!

flag: aSymbol
	"Send this message, with a relevant symbol as argument, to flag a message for subsequent retrieval.  For example, you might put the following line in a number of messages:
	self flag: #returnHereUrgently
	Then, to retrieve all such messages, browse all senders of #returnHereUrgently."!

isClass

	^false!

isNotNil

	^self notNil
	!

split: aSequenceableCollection
	"Split the argument using the receiver as a separator."
	"optimized version for single delimiters"
	"($/ split: '/foo/bar')>>>#('' 'foo' 'bar') asOrderedCollection"
	"([:c| c isSeparator] split: 'aa bb cc dd')>>> #('aa' 'bb' 'cc' 'dd') asOrderedCollection"
		
	| result |
	result := OrderedCollection new: (aSequenceableCollection size / 2) asInteger.
	self split: aSequenceableCollection do: [ :item |
		result add: item ].
	^ result!

split: aSequenceableCollection do: aBlock
	"optimized version for single delimiters:
	Example:
		$/ split: '/foo/bar' indicesDo: [ :item | ]"
	self split: aSequenceableCollection indicesDo: [ :start :end | 
		aBlock value: (aSequenceableCollection copyFrom: start to: end) ]!

split: aSequenceableCollection indicesDo: aBlock
	"Perform an action specified as aBlock (with a start and end argument) to each of the indices of the receiver element that have been identified by splitting the receiver using the splitter argument. optimized version for single delimiters."
	
	"(String streamContents: [:s | Character space split: 'Pharo is cool'  indicesDo: [ :start :end | s << 's:' << start asString << ' ' << 'e:' << end asString << ' ' ]]) >>> 's:1 e:5 s:7 e:8 s:10 e:13 '"
		
		
		
	|  position oldPosition |
	
	position := 1.
	oldPosition := position.
	
	position := aSequenceableCollection indexOf: self startingAt: position.
	[ position > 0 ] whileTrue: [
		aBlock value: oldPosition value: position - 1.
		position := position + 1.
		oldPosition := position.
		position := aSequenceableCollection indexOf: self startingAt: position.
	].

	aBlock value: oldPosition value: aSequenceableCollection size.
!

trace: anObject
	
	Transcript show: anObject displayString!

traceCr
	self traceCr: self!

traceCr: anObject

	self trace: anObject.
	Transcript cr!

traceCrTab: anObject
	
	self traceCr: anObject.
	Transcript tab!

value

	^self! !
!Object categoriesForMethods!
assert:description:!public!testing! !
asString!converting!public! !
flag:!public! !
isClass!public!testing! !
isNotNil!public!testing! !
split:!public! !
split:do:!public! !
split:indicesDo:!public! !
trace:!displaying!public! !
traceCr!displaying!public! !
traceCr:!displaying!public! !
traceCrTab:!displaying!public! !
value!accessing!public! !
!

!Object class methodsFor!

readFrom: aStream
	"Create an object based on the contents of textStringOrStream."

	| object |
	object := Compiler evaluate: aStream contents.
	(object isKindOf: self) ifFalse: [self error: self name, ' expected'].
	^object!

readFromString: aString

	^self readFrom: aString readStream! !
!Object class categoriesForMethods!
readFrom:!public! !
readFromString:!public! !
!

!ProcessorScheduler methodsFor!

lowestPriority

	^self systemBasePriority! !
!ProcessorScheduler categoriesForMethods!
lowestPriority!priority names!public! !
!

!SequenceableCollection methodsFor!

copyWithoutFirst

	^self allButFirst!

doWithIndex: aBlock

	^self keysAndValuesDo: [:eachKey :eachValue | aBlock value: eachValue value: eachKey]!

ensureReadStream

	"Private - Ensure we are dealing with a ReadStream. If not, create one"

	^self readStream!

sort
	"Sort this collection into ascending order using the '<=' operator."

	self sort: [:a :b | a <= b]!

sort: sortBlock
	"Sort the receiver using sortBlock."

	(self class defaultSortAlgorithmClass newSortBlock: sortBlock) sort: self from: 1 to: self size! !
!SequenceableCollection categoriesForMethods!
copyWithoutFirst!copying!public! !
doWithIndex:!public! !
ensureReadStream!private!streaming! !
sort!public! !
sort:!public! !
!

!SequencedStream methodsFor!

ensureReadStream

	"Private - Ensure we are dealing with a ReadStream. If not, create one"

	"Assume this is a ReadStream (or can behave like one)"
	^self! !
!SequencedStream categoriesForMethods!
ensureReadStream!accessing!private! !
!

!Set methodsFor!

doWithIndex: aBlock2
	"Support Set enumeration with a counter, even though not ordered"
	| index |
	index := 0.
	self do: [:item | aBlock2 value: item value: (index := index+1)]! !
!Set categoriesForMethods!
doWithIndex:!enumerating!public! !
!

!SmallInteger class methodsFor!

maxVal

	^self maximum!

minVal

	^self minimum! !
!SmallInteger class categoriesForMethods!
maxVal!constants!public! !
minVal!constants!public! !
!

!StackFrame methodsFor!

stackOfSize: limit
	^self getFrames: limit.! !
!StackFrame categoriesForMethods!
stackOfSize:!printing!private! !
!

!String methodsFor!

asInteger

	^self asNumber asInteger!

asRegexIgnoringCase

	^IRegExp2 new 
		pattern: ('^', self);
		ignoreCase: true;
		yourself
		!

asUnsignedInteger
	"Returns the first integer it can find or nil."

	| stream |
	stream := self readStream.
	[stream atEnd or: [stream peek isDigit]] whileFalse: [stream next].

	^stream atEnd
		ifTrue: [nil]
		ifFalse: [Integer readFrom: stream]!

copyWithRegex: rxString matchesReplacedWith: aString

	^(IRegExp2 pattern: rxString)
		replace: self replaceString: aString!

crLog
	Transcript crShow: self!

format: collection
	"Format the receiver by interpolating elements from collection, as in the following examples:" 
	"('Five is {1}.' format: { 1 + 4}) >>> 'Five is 5.'"
	"('Five is {five}.' format: (Dictionary with: #five -> 5)) >>>  'Five is 5.'"
	"('In {1} you can escape \{ by prefixing it with \\' format: {'strings'}) >>> 'In strings you can escape { by prefixing it with \' "
	"('In \{1\} you can escape \{ by prefixing it with \\' format: {'strings'}) >>> 'In {1} you can escape { by prefixing it with \' "

	^ self class
		new: self size
		streamContents: [ :result | 
			| stream |
			stream := self readStream.
			[ stream atEnd ]
				whileFalse: [ | currentChar |
					(currentChar := stream next) == ${
						ifTrue: [ | expression index |
							expression := stream upTo: $}.
							index := Integer readFrom: expression ifFail: [ expression ].
							result nextPutAll: (collection at: index) asString ]
						ifFalse: [ currentChar == $\
								ifTrue: [ stream atEnd
										ifFalse: [ result nextPut: stream next ] ]
								ifFalse: [ result nextPut: currentChar ] ] ] ]!

includesSubstring: substring
	^ substring isEmpty or: [ (self findString: substring startingAt: 1) > 0 ]!

join: aCollection 
	"'*' join: #('WWWWW' 'W  EW' 'zzzz')
		->  'WWWWW*W  EW*zzzz' "
	^ self class new: (aCollection size * self size) streamContents: [:stream | 
			aCollection
				do: [:each | stream nextPutAll: each asString] 
				separatedBy: [stream nextPutAll: self]]!

matchesRegex: aString

	^(IRegExp2 new pattern: aString) test: self!

substrings: separators

	^self subStringsAnsi: separators!

translated

	^self!

truncateWithElipsisTo: maxLength
	"Return myself or a copy suitably shortened but with elipsis added"

	^ self size <= maxLength
		ifTrue:
			[self]
		ifFalse:
			[(self copyFrom: 1 to: (maxLength - 3)), '...']


	"'truncateWithElipsisTo:' truncateWithElipsisTo: 20"!

uncapitalized
	"Return a copy with the first letter downShifted (in lower case)"
	
	| answer |
	self ifEmpty: [ ^ self copy ].
	answer := self copy.
	answer at: 1 put: answer first asLowercase.
	^ answer! !
!String categoriesForMethods!
asInteger!converting!public! !
asRegexIgnoringCase!public! !
asUnsignedInteger!converting!public! !
copyWithRegex:matchesReplacedWith:!public! !
crLog!operations!public! !
includesSubstring:!public!testing! !
format:!printing!public! !
join:!public! !
matchesRegex:!public!testing! !
substrings:!converting!public! !
translated!converting!public! !
truncateWithElipsisTo:!converting!public! !
uncapitalized!converting!public! !
!
!String categoriesFor: #includesSubstring:!public!testing! !
!String categoriesFor: #uncapitalized!converting!public! !

!String class methodsFor!

loremIpsum
	"Return a constant string with one paragraph of text, the famous Lorem ipsum filler text.
	The result is pure ASCII (Latin words) and contains no newlines."
	
	^ 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'!

loremIpsum: size
	"Return a mostly random multi-paragraph filler string of the specified size.
	The result is pure ASCII, uses CR for newlines and ends with a dot and newline."
	
	"self loremIpsum: 2048"
	
	"not fully implemented"
	^self loremIpsum! !
!String class categoriesForMethods!
loremIpsum!constants!public! !
loremIpsum:!constants!public! !
!

!Symbol methodsFor!

cull: anObject

	^anObject perform: self!

expandMacrosWithArguments: anArray

	"Return a Symbol to be compatible with Pharo"

	^(super expandMacrosWithArguments: anArray) asSymbol!

value: anObject

	^anObject perform: self! !
!Symbol categoriesForMethods!
cull:!operations!public! !
expandMacrosWithArguments:!operations!public! !
value:!public! !
!
!Symbol categoriesFor: #value:!public! !

!SystemDictionary methodsFor!

addToShutDownList: anObject

	"Add anObject to the shutdown list of the system. On shutdown or before image save the message #shutDown: or #shutDown will be sent to anObject"

	SessionManager current
		when: #sessionStarted send: #portisheadShutDown: to: anObject with: true;
		when: #imageSaveCompleted send: #portisheadShutDown: to: anObject with: false!

addToStartUpList: anObject

	"Add anObject to the startup list of the system. On shutdown or after an image save the message #startUp: or #startUp will be sent to anObject"

	SessionManager current
		when: #sessionStarted send: #portisheadStartUp: to: anObject with: true;
		when: #imageSaveCompleted send: #portisheadStartUp: to: anObject with: false!

hasClassNamed: aSymbol

	^(self at: aSymbol ifAbsent: [^false]) isKindOf: Class! !
!SystemDictionary categoriesForMethods!
addToShutDownList:!public! !
addToStartUpList:!public! !
hasClassNamed:!public!testing! !
!

!TranscriptShell methodsFor!

crShow: aString
	
	self cr; show: aString! !
!TranscriptShell categoriesForMethods!
crShow:!adding!public! !
!

!UndefinedObject methodsFor!

subclass: aClassSymbol instanceVariableNames: instVarString classVariableNames: classVarString package: packageString
	^(self
		subclass: aClassSymbol
		instanceVariableNames: instVarString
		classVariableNames: classVarString
		poolDictionaries: '') pharoPackageName: packageString.! !
!UndefinedObject categoriesForMethods!
subclass:instanceVariableNames:classVariableNames:package:!class hierarchy-adding!public! !
!

"End of package definition"!

