| package |
package := Package name: 'Portishead-Core'.
package paxVersion: 1;
	basicComment: 'Portishead - Pharo Compatibility for Dolphin Smalltalk'.


package classNames
	add: #Text;
	add: #UUID;
	add: #ZnUrl;
	yourself.

package methodNames
	add: #Behavior -> #portisheadShutDown:;
	add: #Behavior -> #portisheadStartUp:;
	add: #BlockClosure -> #forkAt:named:;
	add: #BlockClosure -> #valueWithPossibleArgument:;
	add: #ByteArray -> #hex;
	add: #Character -> #isSafeForHTTP;
	add: #Collection -> #as:;
	add: #Collection -> #asDictionary;
	add: #Collection -> #detect:ifFound:ifNone:;
	add: #Collection -> #groupBy:having:;
	add: #Collection -> #groupedBy:;
	add: #Collection -> #groupedBy:having:;
	add: #Collection -> #ifEmpty:;
	add: #Collection -> #ifNotEmpty:;
	add: #Collection -> #select:thenDo:;
	add: #Collection -> #sum;
	add: #Date -> #asDateAndTime;
	add: #Dictionary -> #at:ifPresent:ifAbsentPut:;
	add: #Exception -> #signalerContext;
	add: #Integer -> #printStringHex;
	add: #Integer -> #printStringRoman;
	add: #Integer -> #romanDigits:for:on:;
	add: #Message -> #argument;
	add: #Message -> #argument:;
	add: #Object -> #flag:;
	add: #ProcessorScheduler -> #lowestPriority;
	add: #SequenceableCollection -> #copyWithoutFirst;
	add: #SequenceableCollection -> #doWithIndex:;
	add: #SequenceableCollection -> #ensureReadStream;
	add: #SequencedStream -> #ensureReadStream;
	add: #Set -> #doWithIndex:;
	add: #StackFrame -> #stackOfSize:;
	add: #String -> #asInteger;
	add: #String -> #asUnsignedInteger;
	add: #String -> #copyWithRegex:matchesReplacedWith:;
	add: #String -> #includesSubstring:;
	add: #String -> #join:;
	add: #String -> #matchesRegex:;
	add: #String -> #substrings:;
	add: #String -> #uncapitalized;
	add: #Symbol -> #expandMacrosWithArguments:;
	add: #Symbol -> #value:;
	add: #SystemDictionary -> #addToShutDownList:;
	add: #SystemDictionary -> #addToStartUpList:;
	add: 'Date class' -> #readFrom:pattern:;
	add: 'Dictionary class' -> #newFrom:;
	add: 'Float class' -> #readFrom:ifFail:;
	add: 'Integer class' -> #readFrom:ifFail:;
	add: 'Number class' -> #readFrom:ifFail:;
	add: 'SmallInteger class' -> #maxVal;
	add: 'SmallInteger class' -> #minVal;
	yourself.

package globalNames
	add: #DateError;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	add: #DateError;
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\Core\Object Arts\Dolphin\Base\Dolphin';
	add: '..\Core\Contributions\IDB\IDB DateAndTime';
	add: '..\Core\Object Arts\Dolphin\ActiveX\Components\VBScript\VBScript Regular Expressions';
	yourself).

package!

"Class Definitions"!

Object subclass: #ZnUrl
	instanceVariableNames: 'segments'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
String variableByteSubclass: #Text
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GUID variableByteSubclass: #UUID
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!

DateError := InvalidFormat!


"Loose Methods"!

!Behavior methodsFor!

portisheadShutDown: isQuitting

	"Pharo compatibility - send shutDown: or shutDown to the receiver depending on what it implements.
	We don't implement shutDown:/shutDown here to avoid clashing with Grease or making Grease dependent on Portishead"

	(self respondsTo: #shutDown:) ifTrue: [^self shutDown: isQuitting].
	(self respondsTo: #shutDown) ifTrue: [^self shutDown]!

portisheadStartUp: isSaving

	"Pharo compatibility - send startUp: or startUp to the receiver depending on what it implements.
	We don't implement startUp:/startUp here to avoid clashing with Grease or making Grease dependent on Portishead"

	(self respondsTo: #startUp:) ifTrue: [^self startUp: isSaving].
	(self respondsTo: #startUp) ifTrue: [^self startUp]! !
!Behavior categoriesFor: #portisheadShutDown:!public! !
!Behavior categoriesFor: #portisheadStartUp:!public! !

!BlockClosure methodsFor!

forkAt: anInteger named: aString

	^(self newProcess) 
		priority: anInteger;
		name: aString;
		resume!

valueWithPossibleArgument: anObject

	^self cull: anObject! !
!BlockClosure categoriesFor: #forkAt:named:!public!scheduling! !
!BlockClosure categoriesFor: #newProcess!public!scheduling! !
!BlockClosure categoriesFor: #valueWithPossibleArgument:!*seaside-squeak-platform!public! !

!ByteArray methodsFor!

hex
    " an alternate implementation was | result stream |
	result := String new: self size * 2.
	stream := result writeStream.
	1 to: self size do: [ :ix | |each|
		each := self at: ix.
		stream
			nextPut: ('0123456789ABCDEF' at: each // 16 + 1);
			nextPut: ('0123456789ABCDEF' at: each \\ 16 + 1)].
    ^ result"
	
	"Answer a hexa decimal representation of the receiver"
	| string v index map |
	map := '0123456789abcdef'.
	string := String new: self size * 2. "hex"
	index := 0.
	1 to: self size do: [ :i |
		v := self at: i.
		string at: (index := index + 1) put: (map at: (v bitShift: -4) + 1).
		string at: (index := index + 1) put: (map at: (v bitAnd: 15) + 1)].
	^string! !
!ByteArray categoriesFor: #hex!accessing!primitives!public! !

!Character methodsFor!

isSafeForHTTP
	"whether a character is 'safe', or needs to be escaped when used, eg, in a URL"
	"[GG]  See http://www.faqs.org/rfcs/rfc1738.html. ~ is unsafe and has been removed"
	^ self codePoint < 128
		and: [self isAlphaNumeric
				or: ['.-_' includes: (Character value: self codePoint)]]! !
!Character categoriesFor: #isSafeForHTTP!public!testing! !

!Collection methodsFor!

as: aSimilarClass

	^aSimilarClass newFrom: self!

asDictionary

	^self as: Dictionary!

detect: aBlock ifFound: foundBlock ifNone: exceptionBlock
	"Evaluate aBlock with each of the receiver's elements as the argument.  
	If some element evaluates aBlock to true, then cull this element into 
	foundBlock and answer the result of this evaluation. 
	If none evaluate to true, then evaluate exceptionBlock."

	self
		do: [ :each | 
			(aBlock value: each)
				ifTrue: [ ^ foundBlock cull: each ] ].
	^ exceptionBlock value	!

groupBy: keyBlock having: selectBlock 
	"This message is deprecated. Please use groupedBy:having:."

	#deprecated.

	^ self groupedBy: keyBlock having: selectBlock !

groupedBy: aBlock
	"Answer a dictionary whose keys are the result of evaluating aBlock
	for all my elements, and the value for each key is the selection of 
	my elements that evaluated to that key. Uses species."
	| groups |
	groups := LookupTable new.
	self do: [ :each |
		(groups at: (aBlock value: each) ifAbsentPut: [ OrderedCollection new ]) add: each ].
	self species ~~ OrderedCollection ifTrue: [
		groups associationsDo: [ :association |
			association value: (self species withAll: association value) ]].
	^ groups
!

groupedBy: aBlock having: aSelectionBlock
	"Like in SQL operation - Split the recievers contents into collections of 
	elements for which keyBlock returns the same results, and return those 
	collections allowed by selectBlock."
	^ (self groupedBy: aBlock) select: aSelectionBlock
!

ifEmpty: aBlock
	"Evaluate the given block, answering its value if the receiver is empty, otherwise answer the receiver."
	
	"Note that the fact that this method returns its receiver in case the receiver is not empty allows one to write expressions like the following ones: self classifyMethodAs: (myProtocol ifEmpty: ['As yet unclassified'])"

	^ self isEmpty 
		ifTrue: [ aBlock value ]
		ifFalse: [ self ]!

ifNotEmpty: aBlock
	"Evaluate the given block with the receiver as argument, answering its value
    unless the receiver is empty, in which case answer the receiver."

    ^self isEmpty
          ifTrue: [self]
          ifFalse: [aBlock cull: self] 
!

select: selectBlock thenDo: doBlock
    "Utility method to improve readability.
	Do not create the intermediate collection."

    self do: [: each |
        ( selectBlock value: each ) 
			ifTrue: [ doBlock value: each ]
    ].!

sum
	"This is implemented using a variant of the normal inject:into: pattern. 
	The reason for this is that it is not known whether we're in the normal 
	number line, i.e. whether 0 is a good initial value for the sum. 
	Consider a collection of measurement objects, 0 would be the unitless 
	value and would not be appropriate to add with the unit-ed objects."
	| sum sample |
	sample := self anyOne.
	sum := self inject: sample into: [:accum :each | accum + each].
	^ sum - sample! !
!Collection categoriesFor: #as:!converting!public! !
!Collection categoriesFor: #asDictionary!converting!public! !
!Collection categoriesFor: #detect:ifFound:ifNone:!enumerating!public! !
!Collection categoriesFor: #groupBy:having:!public! !
!Collection categoriesFor: #groupedBy:!public! !
!Collection categoriesFor: #groupedBy:having:!public! !
!Collection categoriesFor: #ifEmpty:!public! !
!Collection categoriesFor: #ifNotEmpty:!operations!public! !
!Collection categoriesFor: #select:thenDo:!enumerating!public! !
!Collection categoriesFor: #sum!operations!public! !

!Date methodsFor!

asDateAndTime

	^DateAndTime date: self time: Time midnight! !
!Date categoriesFor: #asDateAndTime!public! !

!Date class methodsFor!

readFrom: aStringOrStream pattern: patternString
	
	^self readFrom: aStringOrStream ensureReadStream format: patternString! !
!Date class categoriesFor: #readFrom:pattern:!instance creation!public! !

!Dictionary methodsFor!

at: aSymbol ifPresent: presentBlock ifAbsentPut: apBlock

	^(self includesKey: aSymbol)
		ifTrue: [presentBlock cull: (self at: aSymbol)]
		ifFalse: [self at: aSymbol put: ((apBlock respondsTo: #value) ifTrue: [apBlock value] ifFalse: [apBlock])]! !
!Dictionary categoriesFor: #at:ifPresent:ifAbsentPut:!public! !

!Dictionary class methodsFor!

newFrom: aCollectionOfAssociations

	^(self new: aCollectionOfAssociations size)
		addAll: aCollectionOfAssociations;
		yourself! !
!Dictionary class categoriesFor: #newFrom:!instance creation!public! !

!Exception methodsFor!

signalerContext

	^self signalFrame! !
!Exception categoriesFor: #signalerContext!accessing!public! !

!Float class methodsFor!

readFrom: aStream ifFail: aBlock

	^(super readFrom: aStream ifFail: aBlock) asFloat! !
!Float class categoriesFor: #readFrom:ifFail:!instance creation!public! !

!Integer methodsFor!

printStringHex
	^self printStringBase: 16!

printStringRoman
	| stream integer |
	stream := String new writeStream.
	integer := self negative ifTrue: [stream nextPut: $-. self negated] ifFalse: [self].
	integer // 1000 timesRepeat: [stream nextPut: $M].
	integer
		romanDigits: 'MDC' for: 100 on: stream;
		romanDigits: 'CLX' for: 10 on: stream;
		romanDigits: 'XVI' for: 1 on: stream.
	^stream contents!

romanDigits: digits for: base on: aStream
	| n |
	n := self \\ (base * 10) // base.
	n = 9 ifTrue: [^ aStream nextPut: digits last; nextPut: digits first].
	n = 4 ifTrue: [^ aStream nextPut: digits last; nextPut: digits second].
	n > 4 ifTrue: [aStream nextPut: digits second].
	n \\ 5 timesRepeat: [aStream nextPut: digits last]! !
!Integer categoriesFor: #printStringHex!printing!public! !
!Integer categoriesFor: #printStringRoman!printing!public! !
!Integer categoriesFor: #romanDigits:for:on:!printing!public! !

!Integer class methodsFor!

readFrom: aStream ifFail: aBlock

	^(super readFrom: aStream ifFail: aBlock) truncated! !
!Integer class categoriesFor: #readFrom:ifFail:!instance creation!public! !

!Message methodsFor!

argument

	^args at: 1!

argument: anObject

	^args at: 1 put: anObject! !
!Message categoriesFor: #argument!accessing!public! !
!Message categoriesFor: #argument:!accessing!public! !

!Number class methodsFor!

readFrom: aStringOrStream ifFail: aBlock

	| aStream value |
	aStream := aStringOrStream ensureReadStream.
	^(value := self readSmalltalkSyntaxFrom: aStream) isNil 
		ifTrue: [aBlock value]
		ifFalse: [
			(value isInteger and: [aStream peekFor: $/]) 
				ifTrue: [self readFractionFrom: aStream initialInteger: value]
				ifFalse: [value]]
! !
!Number class categoriesFor: #readFrom:ifFail:!instance creation!public! !

!Object methodsFor!

flag: aSymbol
	"Send this message, with a relevant symbol as argument, to flag a message for subsequent retrieval.  For example, you might put the following line in a number of messages:
	self flag: #returnHereUrgently
	Then, to retrieve all such messages, browse all senders of #returnHereUrgently."! !
!Object categoriesFor: #flag:!public! !

!ProcessorScheduler methodsFor!

lowestPriority

	^self systemBasePriority! !
!ProcessorScheduler categoriesFor: #lowestPriority!priority names!public! !

!SequenceableCollection methodsFor!

copyWithoutFirst

	^self allButFirst!

doWithIndex: aBlock

	^self keysAndValuesDo: [:eachKey :eachValue | aBlock value: eachValue value: eachKey]!

ensureReadStream

	"Private - Ensure we are dealing with a ReadStream. If not, create one"

	^self readStream! !
!SequenceableCollection categoriesFor: #copyWithoutFirst!copying!public! !
!SequenceableCollection categoriesFor: #doWithIndex:!public! !
!SequenceableCollection categoriesFor: #ensureReadStream!private!streaming! !

!SequencedStream methodsFor!

ensureReadStream

	"Private - Ensure we are dealing with a ReadStream. If not, create one"

	"Assume this is a ReadStream (or can behave like one)"
	^self! !
!SequencedStream categoriesFor: #ensureReadStream!accessing!private! !

!Set methodsFor!

doWithIndex: aBlock2
	"Support Set enumeration with a counter, even though not ordered"
	| index |
	index := 0.
	self do: [:item | aBlock2 value: item value: (index := index+1)]! !
!Set categoriesFor: #doWithIndex:!enumerating!public! !

!SmallInteger class methodsFor!

maxVal

	^self maximum!

minVal

	^self minimum! !
!SmallInteger class categoriesFor: #maxVal!constants!public! !
!SmallInteger class categoriesFor: #minVal!constants!public! !

!StackFrame methodsFor!

stackOfSize: anInteger

	^(self stackTrace: anInteger) subStrings: Character cr! !
!StackFrame categoriesFor: #stackOfSize:!printing!private! !

!String methodsFor!

asInteger

	^self asNumber asInteger!

asUnsignedInteger
	"Returns the first integer it can find or nil."

	| stream |
	stream := self readStream.
	[stream atEnd or: [stream peek isDigit]] whileFalse: [stream next].

	^stream atEnd
		ifTrue: [nil]
		ifFalse: [Integer readFrom: stream]!

copyWithRegex: rxString matchesReplacedWith: aString

	^(IRegExp2 pattern: rxString)
		replace: self replaceString: aString!

includesSubstring: substring
	^ substring isEmpty or: [ (self findString: substring startingAt: 1) > 0 ]!

join: aCollection 
	"'*' join: #('WWWWW' 'W  EW' 'zzzz')
		->  'WWWWW*W  EW*zzzz' "
	^ self class new: (aCollection size * self size) streamContents: [:stream | 
			aCollection
				do: [:each | stream nextPutAll: each asString] 
				separatedBy: [stream nextPutAll: self]]!

matchesRegex: aString

	^(IRegExp2 new pattern: aString) test: self!

substrings: separators

	^self subStringsAnsi: separators!

uncapitalized
	"Return a copy with the first letter downShifted (in lower case)"
	
	| answer |
	self ifEmpty: [ ^ self copy ].
	answer := self copy.
	answer at: 1 put: answer first asLowercase.
	^ answer! !
!String categoriesFor: #asInteger!converting!public! !
!String categoriesFor: #asUnsignedInteger!converting!public! !
!String categoriesFor: #copyWithRegex:matchesReplacedWith:!public! !
!String categoriesFor: #includesSubstring:!public!testing! !
!String categoriesFor: #join:!public! !
!String categoriesFor: #matchesRegex:!public!testing! !
!String categoriesFor: #substrings:!converting!public! !
!String categoriesFor: #uncapitalized!converting!public! !

!Symbol methodsFor!

expandMacrosWithArguments: anArray

	"Return a Symbol to be compatible with Pharo"

	^(super expandMacrosWithArguments: anArray) asSymbol!

value: anObject

	^anObject perform: self! !
!Symbol categoriesFor: #expandMacrosWithArguments:!operations!public! !
!Symbol categoriesFor: #value:!public! !

!SystemDictionary methodsFor!

addToShutDownList: anObject

	"Add anObject to the shutdown list of the system. On shutdown or before image save the message #shutDown: or #shutDown will be sent to anObject"

	SessionManager current
		when: #sessionStarted send: #portisheadShutDown: to: anObject with: true;
		when: #imageSaveCompleted send: #portisheadShutDown: to: anObject with: false!

addToStartUpList: anObject

	"Add anObject to the startup list of the system. On shutdown or after an image save the message #startUp: or #startUp will be sent to anObject"

	SessionManager current
		when: #sessionStarted send: #portisheadStartUp: to: anObject with: true;
		when: #imageSaveCompleted send: #portisheadStartUp: to: anObject with: false! !
!SystemDictionary categoriesFor: #addToShutDownList:!public! !
!SystemDictionary categoriesFor: #addToStartUpList:!public! !

"End of package definition"!

